{"ast":null,"code":"var _jsxFileName = \"/home/denisr/David/RPO/Chess/Website/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoard = Array(8).fill(Array(8).fill(null));\nconst App = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const handleKnightMove = (row, col) => {\n    const newBoard = JSON.parse(JSON.stringify(board)); // Create a copy of the board\n    const possibleMoves = [[row - 2, col - 1], [row - 2, col + 1], [row - 1, col - 2], [row - 1, col + 2], [row + 1, col - 2], [row + 1, col + 2], [row + 2, col - 1], [row + 2, col + 1]];\n    possibleMoves.forEach(([r, c]) => {\n      if (r >= 0 && r < 8 && c >= 0 && c < 8) {\n        newBoard[r][c] = 'Knight'; // Move the knight to possible positions\n      }\n    });\n\n    newBoard[row][col] = null; // Remove the knight from its original position\n    setBoard(newBoard);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `square ${piece ? 'occupied' : ''}`,\n          onClick: () => handleKnightMove(rowIndex, colIndex),\n          children: piece\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"axTAhf4o3lAgoZdxqAh2v6N6g60=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoard","Array","fill","App","_s","board","setBoard","handleKnightMove","row","col","newBoard","JSON","parse","stringify","possibleMoves","forEach","r","c","className","children","map","rowIndex","piece","colIndex","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/denisr/David/RPO/Chess/Website/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst initialBoard = Array(8).fill(Array(8).fill(null));\n\nconst App = () => {\n  const [board, setBoard] = useState(initialBoard);\n\n  const handleKnightMove = (row, col) => {\n    const newBoard = JSON.parse(JSON.stringify(board)); // Create a copy of the board\n    const possibleMoves = [\n      [row - 2, col - 1],\n      [row - 2, col + 1],\n      [row - 1, col - 2],\n      [row - 1, col + 2],\n      [row + 1, col - 2],\n      [row + 1, col + 2],\n      [row + 2, col - 1],\n      [row + 2, col + 1],\n    ];\n\n    possibleMoves.forEach(([r, c]) => {\n      if (r >= 0 && r < 8 && c >= 0 && c < 8) {\n        newBoard[r][c] = 'Knight'; // Move the knight to possible positions\n      }\n    });\n\n    newBoard[row][col] = null; // Remove the knight from its original position\n    setBoard(newBoard);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"board\">\n        {board.map((row, rowIndex) => (\n          <div className=\"board-row\" key={rowIndex}>\n            {row.map((piece, colIndex) => (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className={`square ${piece ? 'occupied' : ''}`}\n                onClick={() => handleKnightMove(rowIndex, colIndex)}\n              >\n                {piece}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}