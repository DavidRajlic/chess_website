{"ast":null,"code":"var _jsxFileName = \"/home/denisr/David/RPO/Chess/Website/chess/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // Number of rows \n  const n = 8;\n\n  // Number of columns \n  const m = 8;\n\n  // Array which will be used to  \n  // display the chessboard \n  const [chessBoard, setChessBoard] = useState([]);\n  useEffect(() => {\n    // Initialize result with an empty array \n    const result = [];\n\n    // Iterate n number of times to \n    // create n number of rows \n    for (let i = 0; i < n; i++) {\n      // For each of row create an Array \n      // of length m (number of columns) \n      const row = Array.from({\n        length: m\n      });\n      result.push(row);\n    }\n\n    // Set chess board's value to the \n    // created 2d result array \n    setChessBoard(result);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: chessBoard.length > 0 && chessBoard.map((row, rIndex) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((_, cIndex) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `box ${\n\n            // If the sum of row index  \n            // and column index is even  \n            // then background will be  \n            // black else white \n            (rIndex + cIndex) % 2 === 0 ? \"black\" : \"white\"}`\n          }, cIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 37\n          }, this);\n        })\n      }, rIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false);\n}\n_s(App, \"aLwTCx+9LUFh8mwso/rEAFEHQgI=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","n","m","chessBoard","setChessBoard","result","i","row","Array","from","length","push","children","map","rIndex","className","_","cIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/denisr/David/RPO/Chess/Website/chess/src/App.js"],"sourcesContent":["\nimport \"./App.css\"; \nimport { useEffect, useState } from \"react\"; \n  \nexport default function App() { \n  \n    // Number of rows \n    const n = 8; \n  \n    // Number of columns \n    const m = 8; \n  \n    // Array which will be used to  \n    // display the chessboard \n    const [chessBoard, setChessBoard] = useState([]); \n  \n    useEffect(() => { \n  \n        // Initialize result with an empty array \n        const result = []; \n  \n        // Iterate n number of times to \n        // create n number of rows \n        for (let i = 0; i < n; i++) { \n  \n            // For each of row create an Array \n            // of length m (number of columns) \n            const row = Array.from({ length: m }); \n            result.push(row); \n        } \n  \n        // Set chess board's value to the \n        // created 2d result array \n        setChessBoard(result); \n    }, []); \n  \n    return ( \n        <> \n        {chessBoard.length > 0 && \n           chessBoard.map((row, rIndex) => { \n                return ( \n              <div className=\"row\" key={rIndex}> \n               {row.map((_, cIndex) => { \n                                return ( \n                                    <div \n                                        className={`box ${ \n  \n                                            // If the sum of row index  \n                                            // and column index is even  \n                                            // then background will be  \n                                            // black else white \n                                            (rIndex + cIndex) % 2 === 0  \n                                                ? \"black\" : \"white\"\n                                            }`} \n                                        key={cIndex} \n                                    ></div> \n                                ); \n                            })} \n                        </div> \n                    ); \n                })} \n        </> \n    ); \n} "],"mappings":";;AACA,OAAO,WAAW;AAClB,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE5C,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAE1B;EACA,MAAMC,CAAC,GAAG,CAAC;;EAEX;EACA,MAAMC,CAAC,GAAG,CAAC;;EAEX;EACA;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEhDD,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMY,MAAM,GAAG,EAAE;;IAEjB;IACA;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,EAAEK,CAAC,EAAE,EAAE;MAExB;MACA;MACA,MAAMC,GAAG,GAAGC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAER;MAAE,CAAC,CAAC;MACrCG,MAAM,CAACM,IAAI,CAACJ,GAAG,CAAC;IACpB;;IAEA;IACA;IACAH,aAAa,CAACC,MAAM,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIT,OAAA,CAAAE,SAAA;IAAAc,QAAA,EACCT,UAAU,CAACO,MAAM,GAAG,CAAC,IACnBP,UAAU,CAACU,GAAG,CAAC,CAACN,GAAG,EAAEO,MAAM,KAAK;MAC3B,oBACFlB,OAAA;QAAKmB,SAAS,EAAC,KAAK;QAAAH,QAAA,EAClBL,GAAG,CAACM,GAAG,CAAC,CAACG,CAAC,EAAEC,MAAM,KAAK;UACP,oBACIrB,OAAA;YACImB,SAAS,EAAG;;YAER;YACA;YACA;YACA;YACA,CAACD,MAAM,GAAGG,MAAM,IAAI,CAAC,KAAK,CAAC,GACrB,OAAO,GAAG,OACf;UAAE,GACFA,MAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAEf,CAAC;MAAC,GAhBUP,MAAM;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAiBjB,CAAC;IAEd,CAAC;EAAC,gBACR,CAAC;AAEX;AAACrB,EAAA,CA3DuBD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}